#
# 'make'        build executable file 'main'
# 'make clean'  removes all .o and executable files
#
.DEFAULT_GOAL := all

# CROSS_COMPILE 	?= arm-linux-gnueabihf-
CROSS_COMPILE 	?= 
TARGET		  	?= main

# define the C compiler to use
CC 				:= $(CROSS_COMPILE)gcc
LD				:= $(CROSS_COMPILE)ld
OBJCOPY 		:= $(CROSS_COMPILE)objcopy
OBJDUMP 		:= $(CROSS_COMPILE)objdump
SIZE			:= $(CROSS_COMPILE)size


# define any compile-time flags
COMMON_FLAGS  ?= 
COMMON_FLAGS  += -O0
COMMON_FLAGS  += -g

# warning param setting
COMMON_FLAGS	+= -Wall
# think use -Os.
COMMON_FLAGS	+= -Wno-unused-function
COMMON_FLAGS	+= -Wno-unused-variable

COMMON_FLAGS	+= -Wstrict-prototypes
COMMON_FLAGS	+= -Wshadow
# COMMON_FLAGS	+= -Werror

COMMON_FLAGS	+= -Wno-typedef-redefinition

# spec c version
COMMON_FLAGS  += -std=c99
# COMMON_FLAGS  += -Wno-format

# for makefile depend tree create
COMMON_FLAGS  += -MMD -MP

# for weak.
COMMON_FLAGS  += -fno-common

## MAKEFILE COMPILE MESSAGE CONTROL ##
ifeq ($(V),1)
	Q=
else
	Q=@
endif

NOGC = 1
# Put functions and data in their own binary sections so that ld can
# garbage collect them
ifeq ($(NOGC),1)
GC_CFLAGS =
GC_LDFLAGS =
else
GC_CFLAGS = -ffunction-sections -fdata-sections
GC_LDFLAGS = -Wl,--gc-sections -Wl,--check-sections
endif


COMMON_FLAGS	+= $(GC_CFLAGS)

# define ld params
LDFLAGS	?=
LDFLAGS	+= $(GC_LDFLAGS)


# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
LFLAGS ?= 

# define output directory
OUTPUT_PATH	:= output

# define source directory
SRC		?=

# define include directory
INCLUDE	?=

# define lib directory
LIB		?= 


OUTPUT_TARGET	:= $(OUTPUT_PATH)/$(TARGET)

OBJDIR = $(OUTPUT_PATH)/obj










ifeq ($(OS),Windows_NT)
ifdef ComSpec
	WINCMD:=$(ComSpec)
endif
ifdef COMSPEC
	WINCMD:=$(COMSPEC)
endif

	SHELL:=$(WINCMD)


	MAIN	:= $(TARGET).exe
	ECHO=echo
	
	SOURCEDIRS	:= $(SRC)
	INCLUDEDIRS	:= $(INCLUDE)
	LIBDIRS		:= $(LIB)
	FIXPATH = $(subst /,\,$1)
	RM      := del /q /s
	MD			:= mkdir
	MD_CHECK	:= $(Q)if not exist "$@"

else ifeq ($(shell uname), Darwin)
    # Code for OS X
	MAIN	:= $(TARGET)
	ECHO=echo
	
	SOURCEDIRS	:= $(SRC)
	INCLUDEDIRS	:= $(INCLUDE)
	LIBDIRS		:= $(LIB)
	FIXPATH = $1
	RM = rm -rf
	MD	:= mkdir -p
	MD_CHECK	:=
else
	MAIN	:= $(TARGET)
	
	SOURCEDIRS	:= $(SRC)
	INCLUDEDIRS	:= $(INCLUDE)
	LIBDIRS		:= $(LIB)
	FIXPATH = $1
	RM = rm -rf
	MD	:= mkdir -p
	MD_CHECK	:=
endif





# define any directories containing header files other than /usr/include
INCLUDES	:= $(patsubst %,-I%, $(INCLUDEDIRS:%/=%))

# define the C libs
LIBS		:= $(patsubst %,-L%, $(LIBDIRS:%/=%))

# define the C source files
SOURCES		:= $(wildcard $(patsubst %,%/*.c, $(SOURCEDIRS)))

# define the C object files 
OBJECTS			:= $(patsubst %, $(OBJDIR)/%, $(SOURCES:.c=.o))
OBJ_MD			:= $(addprefix $(OBJDIR)/, $(SOURCEDIRS))



ALL_DEPS := $(OBJECTS:.o=.d)

# include dependency files of application
ifneq ($(MAKECMDGOALS),clean)
-include $(ALL_DEPS)
endif

# ifeq (${wildcard $(OUTPUT_PATH)},)
# $(shell mkdir $(OUTPUT_PATH))	
# endif

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

OUTPUT_MAIN           := $(OUTPUT_PATH)/$(MAIN)
OUTPUT_MAIN_RESOURCE  := $(OUTPUT_PATH)/app_egui_resource_merge.bin

# Fix path error.
#OUTPUT_MAIN := $(call FIXPATH,$(OUTPUT_MAIN))

USER_COMPILE_TARGETS ?= 

.PHONY: all clean info

info:
	@$(ECHO) Current Configuration: APP=$(APP) PORT=$(PORT)

dasm:
	$(OBJCOPY) -v -O binary $(OUTPUT_MAIN) $(OUTPUT_TARGET).bin
	$(OBJDUMP) --source --all-headers --demangle --line-numbers --wide $(OUTPUT_MAIN) > $(OUTPUT_TARGET).lst

size:
	@$(ECHO) Print Size
	$(Q)@$(SIZE) --format=berkeley $(OUTPUT_MAIN)

.PHONY: all
all: | info $(OUTPUT_MAIN_RESOURCE) $(MAIN)
	@$(ECHO) Executing 'all' complete!

# @$(ECHO) Print Size
# $(Q)@$(SIZE) --format=berkeley $(OUTPUT_MAIN)

# -Wl,-Map,$(OUTPUT_TARGET).map 

# mk path for object.
$(OBJ_MD):
	$(MD_CHECK) $(Q)$(MD) $(call FIXPATH, $@)

# mk output path.
$(OUTPUT_PATH):
	$(MD_CHECK) $(Q)$(MD) $(call FIXPATH, $@)

$(OBJDIR):
	$(MD_CHECK) $(Q)$(MD) $(call FIXPATH, $@)

$(OUTPUT_MAIN): $(OBJECTS)
	@$(ECHO) Linking    : "$@"
	$(Q)$(CC) $(COMMON_FLAGS) $(LDFLAGS) $(INCLUDES) -o $(OUTPUT_MAIN) $(OBJECTS) $(LFLAGS) $(LIBS) $(OUTPUT_BT_LIB)

$(MAIN): | $(OUTPUT_PATH) $(OBJDIR) $(OBJ_MD) $(USER_COMPILE_TARGETS) $(OUTPUT_MAIN)
	@$(ECHO) Building   : "$(OUTPUT_MAIN)"

# Static Pattern Rules [targets ...: target-pattern: prereq-patterns ...]
$(OBJECTS): $(OBJDIR)/%.o : %.c
	@$(ECHO) Compiling  : "$<"
	$(Q)$(CC) $(COMMON_FLAGS) $(INCLUDES) -c $<  -o $@


clean:
#	$(RM) $(OUTPUT_MAIN)
#	$(RM) $(OBJECTS)
#	$(RM) $(OBJDIR)
	$(Q)$(RM) $(call FIXPATH, $(OUTPUT_PATH))
	@$(ECHO) Cleanup complete!

run: all
	./$(OUTPUT_MAIN) $(OUTPUT_MAIN_RESOURCE)
	@$(ECHO) Executing 'run: all' complete!

$(OUTPUT_MAIN_RESOURCE):resource
	@$(ECHO) Generating resource file complete!

resource:
	python ./scripts/app_resource_generate.py -r $(EGUI_APP_PATH)/resource -o $(OUTPUT_PATH)
	
resource_refresh:
	python ./scripts/app_resource_generate.py -r $(EGUI_APP_PATH)/resource -o $(OUTPUT_PATH) -f ture
